Chapter 7 합성곱 신경망(CNN) - Convolutional Neural Network
여러분야(이미지, 음석 인식)에서 사용 됨.
특히 이미지 인식분야에서의 딥러닝 기법은 대부분 CNN을 기반

* 합성곱(convolution Layer), 풀링(pooling Layer)계층 도입

이전 Chapter까지의 신경망은 인접한 계층의 모든 뉴런과 결합되어 있음 -> 완전연결
Affine -> ReLU(or Sigmoid) -> ... -> softmax-> 
형태로 구성

* CNN의 구성
Conv -> ReLU -> (Pooling) -> ... -> softmax ->

완전연결 신경망과의 차이점
* 각 계층 사이에는 입체적인 데이터(3차원 데이터)가 흐름

완견연결계층의 문제점 - 데이터 형상이 무시됨! 
* 입력데이터를 1차원 데이터로 평탄화
* 형상에 담긴 공간정보 상실(ex 인접한 픽셀은 값이 유사함)

데이터형상 - 이미지(가로, 세로, 색상채널)

-> 합성곱 계층 등장

합성곱 계층
데이터의 형상을 유지한 채로 흘려보냄
-> 형상을 가진 데이터(이미지)를 재대로 이해할 가능성 있음

합성곱계층의 입출력 데이터: 특징 맵
(입력: 입력특징맵, 출력: 출력특징맵)

합성곱 연산
* 합성곱 계층에서 합성곱 연산을 처리
-> 영상처리의 필터연산과 유사

처리
필터의 윈도우를 일정 간격으로 이동해가며 입력데이터에 적용
1. 대응하는 원소끼리 곱한 뒤, 그 총합을 계산  (= 단일 곱셈-누산)
2. 총합의 모든 원소에 편향을 더한 결과를 다음 계층으로 전달

필터의 매개변수: 완전연결 신경망에서의 가중치 역할

패딩(pedding)
합성곱 연산 수행전, 입력데이터 주변을 특정값(ex: 0)으로 채우는 것
폭: 채울 원소의 갯수
출력 크기 조정 목적으로 사용
(ex: 4,4 데이터 -> 3,3 필터 -> 2,2 결과) <- 결과가 출력보다 작아지는 문제 해결

스트라이드(stride)
필터를 적용하는 위치의 간격
스트라이드 증가시, 출력의 크기는 감소함
ex: stride:2 -> 윈도우가 2칸씩 이동

출력 크기 계산
입력(H,W), 필터크기(FH,FW), 출력크기(OH,OW)
OH=((H+2P-FH)/S) + 1
OW=((W+2P-Fw)/S) + 1
단, OH, OW는 정수로 나누어 떨어지는 값이어야 함

3차원 데이터의 합성곱 연산
각 차원(채널)별로 합성곱 연산 이후에, 연산결과의 합을 출력으로 함
주의) 
입력데이터의 채널수, 필터의 채널수는 같아야 함
모든 필터들의 크기도 같아야 함 (단, 필터의 크기 자체는는 원하는 값으로 설정 가능)

블록으로 생각하기
3차원 합성곱 연산에서 데이터, 필터는 직육면체 블록이라고 생각 할 수 있음
(채널, 높이, 너비) 순으로 표시

한장의 특징맵 = 채널이 1개인 맵

채널이 1개인 데이터로 다수의 채널을 내보내는 방법?
-> 필터를 다수 사용

* 필터 수 만큼의 출력맵 생성 -> 이를 합치면, (FN,OH,OW)의 블록이 됨

* 필터의 수 또한, 고려해야 함 -> 필터의 가중치는 4차원(FN,C,H,W) 데이터!

배치 처리
입력데이터를 여러개 묶어 한번에 수행
입력데이터의 차원을 늘려 4차원 데이터로 (갯수, 채널수, 높이, 너비) 순으로 저장
4차원 데이터 1개가 흐를때 마다, N개의 데이터에 대한 합성곱 연살이 이뤄짐

풀링 계층
세로, 가로 방향의 공간을 줄이는 연산

최대풀링: 최댓값을 구하는 연산
ex) 2X2 최대풀링: 2X2 영역의 최댓값을 구하는 연산

일반적으로 풀링의 윈도우 크기 = 스트라이드 값으로 함

평균풀링: 대상영역의 평균값 계산

특징
1. 학습 해야할 매개변수 없음
2. 채널 수 변하지 않음
3. 입력의 변화에 대한 영향이 적음

합성곱 / 풀링계층 구현

im2col(Image to Column) 함수(예제파일에 포함)
여러개의 for문 사용, numpy + for문 = 성능저하 -> im2col을 통해 데이터 전개
* 입력데이터를 필터링 하기 좋게 전개하는 함수
3,4 차원 데이터를 2차원으로 변환

이후, 필터를 세로로 전개한 다음 행렬 내적을 계산하고, 
이를 다시 출력데이터 형태로 변환하는 방법으로 연산

